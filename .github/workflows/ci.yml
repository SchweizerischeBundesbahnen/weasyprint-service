---
name: Build & Release
on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}  # Image name will be <account>/<repo>
jobs:
  verify-with-tox:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: ðŸ“„ Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: ðŸ§± Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: ðŸ§± Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: '3.13'
          cache: poetry
      - name: ðŸ§± Install dependencies
        run: poetry install --all-extras
      - name: ðŸ§ª Run tests
        run: poetry run tox
      - name: SonarCloud scan for PR
        uses: sonarsource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25  # v5.3.1
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
      - name: SonarCloud scan for Push
        uses: sonarsource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25  # v5.3.1
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.branch.name=${{ github.head_ref }}
      - name: Docker Hadolint
        uses: hadolint/hadolint-action@3fc49fb50d59c6ab7917a2e4195dba633e515b29
        with:
          format: tty
  release-please:
    needs: verify-with-tox
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: ðŸš€ release-please
        id: release
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c  # v4.3.0
        with:
          release-type: simple
          include-v-in-tag: false
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
  docker-build-and-publish:
    needs: release-please
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: ðŸ“„ Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: ðŸ§± Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: ðŸ§± Prepare tags for Docker meta
        id: tags
        env:
          # When release-please is skipped, these values will be empty
          release_created: ${{ needs.release-please.outputs.release_created }}
          version: ${{ needs.release-please.outputs.version }}
        run: |
          tags=""
          if [[ "$release_created" = 'true' ]]; then
            tags="type=semver,pattern={{version}},value=$version
          type=semver,pattern={{major}},value=$version
          type=semver,pattern={{major}}.{{minor}},value=$version"
          else
            tags="type=ref,event=branch
          type=ref,event=pr"
          fi
          {
            echo 'tags<<EOF'
            echo "$tags"
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: ðŸ§± Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ steps.tags.outputs.tags }}
      - name: ðŸ§± Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0
      - name: ðŸ§± Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      - name: ðŸ“¦ Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          provenance: false
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: APP_IMAGE_VERSION=${{ steps.meta.outputs.version }}
